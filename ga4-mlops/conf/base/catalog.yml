# Here you can define all your data sets by using simple YAML syntax.
#
# Documentation for this file format can be found in "The Data Catalog"
# Link: https://kedro.readthedocs.io/en/stable/data/data_catalog.html

# COMMON SETTINGS

_raw_data_args: &raw_data_args
  type: pandas.GBQQueryDataSet
  project: gid-ml-framework
  layer: raw

_data_args: &data_args
  type: pandas.CSVDataSet
  save_args:
    index: False

_artifact_args: &artifact_args
  type: kedro_mlflow.io.artifacts.MlflowArtifactDataSet

_stored_modeling_artifacts_args: &stored_modeling_artifacts_args
  run_id: f33b2741b0ff42458a48b45622d956c4

# RAW DATA

train.ga4_data:
  filepath: src/ga4_mlops/pipelines/data_preprocessing/sql/get_ga4_raw_data.sql
  load_args:
    configuration: {
      'query': {
        'parameterMode': 'NAMED',
        'queryParameters': [
            {
                'name': 'start_date',
                'parameterType': {'type': 'STRING'},
                'parameterValue': {'value': '20201121'}
            },
            {
                'name': 'end_date',
                'parameterType': {'type': 'STRING'},
                'parameterValue': {'value': '20201128'}
            },
            {
                'name': 'sample_size',
                'parameterType': {'type': 'INT64'},
                'parameterValue': {'value': 100000}
            }
        ]
      }
    }
    reauth: True
  <<: *raw_data_args
  

valid.ga4_data:
  filepath: src/ga4_mlops/pipelines/data_preprocessing/sql/get_ga4_raw_data.sql
  load_args:
    configuration: {
      'query': {
        'parameterMode': 'NAMED',
        'queryParameters': [
            {
                'name': 'start_date',
                'parameterType': {'type': 'STRING'},
                'parameterValue': {'value': '20201129'}
            },
            {
                'name': 'end_date',
                'parameterType': {'type': 'STRING'},
                'parameterValue': {'value': '20201129'}
            },
            {
                'name': 'sample_size',
                'parameterType': {'type': 'INT64'},
                'parameterValue': {'value': 2000}
            }
        ]
      }
    }
    reauth: True
  <<: *raw_data_args

test.ga4_data:
  filepath: src/ga4_mlops/pipelines/data_preprocessing/sql/get_ga4_raw_data.sql
  load_args:
    configuration: {
      'query': {
        'parameterMode': 'NAMED',
        'queryParameters': [
            {
                'name': 'start_date',
                'parameterType': {'type': 'STRING'},
                'parameterValue': {'value': '20201130'}
            },
            {
                'name': 'end_date',
                'parameterType': {'type': 'STRING'},
                'parameterValue': {'value': '20201130'}
            },
            {
                'name': 'sample_size',
                'parameterType': {'type': 'INT64'},
                'parameterValue': {'value': 2000}
            }
        ]
      }
    }
    
  <<: *raw_data_args

predict.ga4_data:
  filepath: src/ga4_mlops/pipelines/data_preprocessing/sql/get_ga4_raw_data.sql
  load_args:
    configuration: {
      'query': {
        'parameterMode': 'NAMED',
        'queryParameters': [
            {
                'name': 'start_date',
                'parameterType': {'type': 'STRING'},
                'parameterValue': {'value': '20210126'}
            },
            {
                'name': 'end_date',
                'parameterType': {'type': 'STRING'},
                'parameterValue': {'value': '20210131'}
            },
            {
                'name': 'sample_size',
                'parameterType': {'type': 'INT64'},
                'parameterValue': {'value': 20000}
            }
        ]
      }
    }
  <<: *raw_data_args

# PRIMARY DATA (AFTER: AFTER: SELECTION, AGGREGATION, SAMPLING)

train.df:
  filepath: data/03_primary/df_train.csv
  layer: primary
  <<: *data_args

valid.df:
  filepath: data/03_primary/df_valid.csv
  layer: primary
  <<: *data_args

test.df:
  filepath: data/03_primary/df_test.csv
  layer: primary
  <<: *data_args

predict.df:
  filepath: data/03_primary/df_predict.csv
  layer: primary
  <<: *data_args

# FEATURE DATA

train.df_fe:
  filepath: data/04_feature/df_fe_train.csv
  layer: feature
  <<: *data_args

valid.df_fe:
  filepath: data/04_feature/df_fe_valid.csv
  layer: feature
  <<: *data_args

test.df_fe:
  filepath: data/04_feature/df_fe_test.csv
  layer: feature
  <<: *data_args

predict.df_fe:
  filepath: data/04_feature/df_fe_predict.csv
  layer: feature
  <<: *data_args

fitted.imputers:
  data_set:
    filepath: data/04_feature/imputers.pkl
    type: pickle.PickleDataSet
  <<: *artifact_args

stored.imputers:
  data_set:
    filepath: data/04_feature/imputers.pkl
    type: pickle.PickleDataSet
  <<: *stored_modeling_artifacts_args
  <<: *artifact_args

fitted.feature_encoders:
  data_set:
    filepath: data/04_feature/feature_encoders.pkl
    type: pickle.PickleDataSet
  <<: *artifact_args

stored.feature_encoders:
  data_set:
    filepath: data/04_feature/feature_encoders.pkl
    type: pickle.PickleDataSet
  <<: *stored_modeling_artifacts_args
  <<: *artifact_args

# MODEL INPUT DATA (AFTER: FEATURE ENGINEERING, MANUAL FEATURE SELECTION, IMPUTATION, ENCODING)

train.abt:
  filepath: data/05_model_input/abt_train.csv
  layer: model_input
  <<: *data_args

valid.abt:
  type: pandas.CSVDataSet
  filepath: data/05_model_input/abt_valid.csv
  layer: model_input
  <<: *data_args

test.abt:
  filepath: data/05_model_input/abt_test.csv
  layer: model_input
  <<: *data_args

predict.abt:
  filepath: data/05_model_input/abt_predict.csv
  layer: model_input
  <<: *data_args

# MODELS

fitted.model:
  data_set:
    type: pickle.PickleDataSet
    filepath: data/06_models/model.pkl
  <<: *artifact_args

stored.model:
  data_set:
    type: pickle.PickleDataSet
    filepath: data/06_models/model.pkl
  <<: *stored_modeling_artifacts_args
  <<: *artifact_args

fitted.calibrator:
  data_set:
    type: pickle.PickleDataSet
    filepath: data/06_models/calibrator.pkl
  <<: *artifact_args

stored.calibrator:
  data_set:
    type: pickle.PickleDataSet
    filepath: data/06_models/calibrator.pkl
  <<: *stored_modeling_artifacts_args
  <<: *artifact_args

model_config:
  data_set:
    type: json.JSONDataSet
    filepath: data/06_models/model_config.json
  <<: *artifact_args

calibration_plot:
  data_set:
    type: matplotlib.MatplotlibWriter
    filepath: data/06_models/calibration_plot.png
    save_args:
      format: png
  <<: *artifact_args

# MODEL OUTPUT

reference_predictions:
  filepath: data/07_model_output/reference_predictions.csv
  layer: model_output
  <<: *data_args

predictions:
  filepath: data/07_model_output/predictions.csv
  layer: model_output
  <<: *data_args

# REPORTING

train.model.shap_summary_plot:
  data_set:
    type: matplotlib.MatplotlibWriter
    filepath: data/08_reporting/train_model_shap_summary_plot.png
    save_args:
      format: png
  <<: *artifact_args

train.calibrator.shap_summary_plot:
  data_set:
    type: matplotlib.MatplotlibWriter
    filepath: data/08_reporting/train_calibrator_shap_summary_plot.png
    save_args:
      format: png
  <<: *artifact_args

train.model.feature_importance:
  data_set:
    type: json.JSONDataSet
    filepath: data/08_reporting/train_model_feature_importance.json
  <<: *artifact_args

train.calibrator.feature_importance:
  data_set:
    type: json.JSONDataSet
    filepath: data/08_reporting/train_calibrator_feature_importance.json
  <<: *artifact_args

train.model.partial_dependence_plots:
  data_set:
    type: matplotlib.MatplotlibWriter
    filepath: data/08_reporting/train_model_partial_dependence_plots
    overwrite: True
    save_args:
      format: png
  <<: *artifact_args

train.calibrator.partial_dependence_plots:
  data_set:
    type: matplotlib.MatplotlibWriter
    filepath: data/08_reporting/train_calibrator_partial_dependence_plots
    overwrite: True
    save_args:
      format: png
  <<: *artifact_args

valid.model.shap_summary_plot:
  data_set:
    type: matplotlib.MatplotlibWriter
    filepath: data/08_reporting/valid_model_shap_summary_plot.png
    save_args:
      format: png
  <<: *artifact_args

valid.calibrator.shap_summary_plot:
  data_set:
    type: matplotlib.MatplotlibWriter
    filepath: data/08_reporting/valid_calibrator_shap_summary_plot.png
    save_args:
      format: png
  <<: *artifact_args

valid.model.feature_importance:
  data_set:
    type: json.JSONDataSet
    filepath: data/08_reporting/valid_model_feature_importance.json
  <<: *artifact_args

valid.calibrator.feature_importance:
  data_set:
    type: json.JSONDataSet
    filepath: data/08_reporting/valid_calibrator_feature_importance.json
  <<: *artifact_args

valid.model.partial_dependence_plots:
  data_set:
    type: matplotlib.MatplotlibWriter
    filepath: data/08_reporting/valid_model_partial_dependence_plots
    overwrite: True
    save_args:
      format: png
  <<: *artifact_args

valid.calibrator.partial_dependence_plots:
  data_set:
    type: matplotlib.MatplotlibWriter
    filepath: data/08_reporting/valid_calibrator_partial_dependence_plots
    overwrite: True
    save_args:
      format: png
  <<: *artifact_args

test.model.shap_summary_plot:
  data_set:
    type: matplotlib.MatplotlibWriter
    filepath: data/08_reporting/test_model_shap_summary_plot.png
    save_args:
      format: png
  <<: *artifact_args

test.calibrator.shap_summary_plot:
  data_set:
    type: matplotlib.MatplotlibWriter
    filepath: data/08_reporting/test_calibrator_shap_summary_plot.png
    save_args:
      format: png
  <<: *artifact_args

test.model.feature_importance:
  data_set:
    type: json.JSONDataSet
    filepath: data/08_reporting/test_model_feature_importance.json
  <<: *artifact_args

test.calibrator.feature_importance:
  data_set:
    type: json.JSONDataSet
    filepath: data/08_reporting/test_calibrator_feature_importance.json
  <<: *artifact_args

test.model.partial_dependence_plots:
  data_set:
    type: matplotlib.MatplotlibWriter
    filepath: data/08_reporting/test_model_partial_dependence_plots
    overwrite: True
    save_args:
      format: png
  <<: *artifact_args

test.calibrator.partial_dependence_plots:
  data_set:
    type: matplotlib.MatplotlibWriter
    filepath: data/08_reporting/test_calibrator_partial_dependence_plots
    overwrite: True
    save_args:
      format: png
  <<: *artifact_args
